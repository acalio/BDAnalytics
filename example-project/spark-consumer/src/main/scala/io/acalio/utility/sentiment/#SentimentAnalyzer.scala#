package io.acalio.utility.sentiment
import edu.stanford.nlp.pipeline.Annotation
import edu.stanford.nlp.ling.CoreAnnotations
import edu.stanford.nlp.sentiment.SentimentCoreAnnotations
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.neural.rnn.RNNCoreAnnotations
import edu.stanford.nlp.pipeline.StanfordCoreNLP
import eu.fbk.dh.tint.runner.TintPipeline
import java.{util => ju}


object SentimentAnalyzer {

  @transient private var enSentimentPipeline : StanfordCoreNLP = _
  @transient private var itSentimentPipeline : TintPipeline = _

  import Language.Language
  private var lan : Language = Language.EN

  def setLanguage(l: Language) {
    lan = l
  }

  def sentiment(text:String): Double = {
    var annotation: Annotation = null
    lan match {
      case Language.EN => {
        annotation = sentimentEn(text)
      }
      case Language.IT => {
        annotation = sentimentIt(text)
      }
    }

    //val the the sentiment score of each sentence
    var sentimentScore: Double = 0
    annotation
      .get(classOf[CoreAnnotations.SentencesAnnotation])
      .forEach(s =>
        sentimentScore+=RNNCoreAnnotations
          .getPredictedClass(s.get(classOf[SentimentCoreAnnotations.SentimentAnnotatedTree])))
    //the sentiment score is the average sentiment among every tree in the text
    return sentimentScore / annotation.get(classOf[CoreAnnotations.SentencesAnnotation]).size().toDouble
  }


  def sentimentEn(text: String): Annotation = {
    if (enSentimentPipeline == null) {
      val props = new ju.Properties
      props.setProperty("annotators", "tokenize, ssplit, parse, sentiment")
      enSentimentPipeline = new StanfordCoreNLP(props)
    }
    // Get the original Annotation (Stanford CoreNLP)
    return enSentimentPipeline.process(text); // 0 5, 0 means very negative, 2 is neutral and 4 is very positive
  }

  def sentimentIt(text: String): Annotation = {
    if (itSentimentPipeline == null) {
      itSentimentPipeline = new TintPipeline
      // Load the default properties
      // see https://github.com/dhfbk/tint/blob/master/tint-runner/src/main/resources/default-config.properties
      itSentimentPipeline.loadDefaultProperties();
      // Add a custom property
      itSentimentPipeline.setProperty("annotators", "tokenize, ssplit, pos, parse, sentiment");
      // Load the models
      itSentimentPipeline.load();
    }
    return itSentimentPipeline.runRaw(text)
  }
  
}

object Language extends Enumeration {
  type Language = Value
  val EN, IT = Value
  def get(l: String): Language = {
    l match {
      case "en" => return EN
      case "it" => return IT
      case _ => throw new RuntimeException(s"Unrecognized option: $l")
    }

  }
}


